@typeparam TItem

<div class="container mt-4">
	<h1>@Title</h1>

	<SearchBox SearchText="@SearchText" OnSearchChanged="HandleSearch" />

	@if (Loading)
	{
		<LoadingIndicator />
	}
	else if (Items == null || !Items.Any())
	{
		<div class="alert alert-info">No items found.</div>
	}
	else
	{
		<div class="row">
			@foreach (var item in Items)
			{
				<div class="col-md-4 mb-4">
					@ItemTemplate(item)
				</div>
			}
		</div>

		<PaginationControl Currentpage="@CurrentPage" Totalpages="@TotalPages" OnPageChanged="HandlePageChange" />
	}
</div>

@code {
	[Parameter] public string Title { get; set; } = "Items";
	[Parameter] public required Func<string, int, Task<PagedResult<TItem>>> LoadData { get; set; }
	[Parameter] public required RenderFragment<TItem> ItemTemplate { get; set; }

	private List<TItem> Items = new();
	private bool Loading = false;
	private string SearchText = "";
	private int CurrentPage = 1;	
	private int TotalPages = 1;

	protected override async Task OnParametersSetAsync()
	{
		if (!Items.Any())
		{
			await LoadItems();
		}
	}

	private async Task LoadItems()
	{
		if (Loading) return;

		Loading = true;
		try
		{
			var pagedResult = await LoadData.Invoke(SearchText, CurrentPage);
			Items = pagedResult.Items;
			TotalPages = pagedResult.TotalPages;
		}
		finally
		{
			Loading = false;
		}
	}

	private async Task HandleSearch(string searchValue)
	{
		SearchText = searchValue;
		CurrentPage = 1;
		await LoadItems();
	}

	private async Task HandlePageChange(int newPage)
	{
		CurrentPage = newPage;
		await LoadItems();
	}
}